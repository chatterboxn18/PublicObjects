(function( window, document, $ ) {
    var messageQueue = new MessageQueue();
    var cache = {};
    var debug = false

    /**
     * The UniWebView module is a single service layer for interacting with the UniWebView API
     * @constructor
     */
    var UniWebView = function()
    {
        this.base = "uniwebview://";
        var _this = this;
        this.messageQueue = messageQueue;
        this.messageLifetime = 1.0*1000.0;
        /**
         * A generic window handler for a fallback
         */
        this.windowHandler = function()
        {
            if ( debug ) {
                console.log("Call to generic window handler made on topic " + this);
            }
            _this.broadcastToJs(this, Array.prototype.slice.call(arguments))
        }
    };

    /**
     * Log a message to Unity for debugging purposes
     * @param message
     */
    UniWebView.prototype.logToUnity = function( message )
    {
        this.broadcastToUnity("log", {message: message});
    };

    /**
     * Broadcast to any JS listeners
     * @param topic the topic to broadcast on
     * @param args the arguments to pass to the callback function
     */
    UniWebView.prototype.broadcastToJs = function( topic, args )
    {
        cache[topic] && cache[topic].forEach(function( listener )
        {
            listener.apply(null, args || []);
            if ( debug )
            {
                console.log("Unity broadcasting on " + topic + " with " + args.length + " arguments");
            }
        });
    };

    /**
     * Remove a registered listener
     * @param handle: the reference that was generated by the 'onUnity' method
     */
    UniWebView.prototype.offUnity = function( handle )
    {
        var t = handle[0];
        cache[t] && cache[t].forEach(function( value, idx )
        {
            if ( value == handle[1] )
            {
                cache[t].splice(0, cache[t].length);
                if ( window[t] )
                {
                    window[t] = null;
                }
            }
        });
    };

    /**
     * Add a listener to a Unity native call
     * @param topic
     * @param callback
     * @returns {*[]}
     */
    UniWebView.prototype.onUnity = function( topic, callback )
    {
        if ( debug )
        {
            console.log("Registering listener on " + topic);
        }
        //add the callback to the topic
        if ( !cache[topic] )
        {
            cache[topic] = [];
        }
        cache[topic].push(callback);
        //add fallback to window
        if ( !window[topic] )
        {
            window[topic] = this.windowHandler.bind(topic);
        }
        return [topic, callback];
    };

    /**
     * Call into the native unity code
     * @param func
     * @param args
     */
    UniWebView.prototype.broadcastToUnity = function( func, args )
    {
        var command = this.base + func;
        var _args = args || {};
        var message = new Message(command, _args);
        if ( debug )
        {
            console.log("Calling unity with command " + command);
        } else
        {
            //call
            messageQueue.enqueue(message);
            if(messageQueue.length() == 1)
            {
                console.log(message);
                this.sendMessage(message);
            }
        }
    };

    UniWebView.prototype.messageRecieved = function(uniqueID)
    {
        if(uniqueID === "") return;

        if(!messageQueue.isEmpty())
        {
            var message = messageQueue.first();
            if(uniqueID == message.uniqueID)
            {
                messageQueue.first().recieved = true;
                messageQueue.dequeue();
            } else
            {
                return "wrong id: "+uniqueID;
            }
        }
        if(!messageQueue.isEmpty())
        {
            this.sendMessage(messageQueue.first());
        }
    };


    UniWebView.prototype.onMessageExpired = function(message)
    {
        if(!message.recieved)
        {
            messageQueue.dequeue();
            this.sendMessage(messageQueue.first());
            console.log("message timed out: "+message.data);
        }
    };

    UniWebView.prototype.sendMessage = function(message)
    {
        if(message != undefined)
        {
            window.location.href = message.data;
            console.log("Sending unity with message " + message.data);
            var that = this;
            setTimeout(function(){ that.onMessageExpired(message) }, this.messageLifetime);
        }
    };
    window.UniWebView = new UniWebView();
}(window, document, window.jQuery));